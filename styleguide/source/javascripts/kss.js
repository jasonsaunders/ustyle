// Generated by CoffeeScript 1.6.3
var KssStateGenerator;

KssStateGenerator = (function() {
  var pseudos, psuedo_selectors, styleEl;

  psuedo_selectors = ['hover', 'enabled', 'disabled', 'active', 'visited', 'focus', 'target', 'checked', 'empty', 'first-of-type', 'last-of-type', 'first-child', 'last-child'];

  pseudos = new RegExp("(\\:" + (psuedo_selectors.join('|\\:')) + ")", "g");

  styleEl = document.createElement('style');

  styleEl.type = 'text/css';

  function KssStateGenerator() {
    var idx, idxs, mediaRule, rule, stylesheet, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
    try {
      _ref = document.styleSheets;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        stylesheet = _ref[_i];
        if (stylesheet.href && stylesheet.href.indexOf(document.domain) >= 0) {
          idxs = [];
          _ref1 = stylesheet.cssRules;
          for (idx = _j = 0, _len1 = _ref1.length; _j < _len1; idx = ++_j) {
            rule = _ref1[idx];
            this.buildRule(rule);
            if (rule.type === CSSRule.MEDIA_RULE) {
              _ref2 = rule.cssRules;
              for (idx = _k = 0, _len2 = _ref2.length; _k < _len2; idx = ++_k) {
                mediaRule = _ref2[idx];
                this.buildRule(mediaRule);
              }
            }
            pseudos.lastIndex = 0;
          }
        }
      }
    } catch (_error) {}
  }

  KssStateGenerator.prototype.buildRule = function(rule) {
    var ruleText;
    if ((rule.type === CSSRule.STYLE_RULE) && pseudos.test(rule.selectorText)) {
      if (rule.parentRule === null) {
        ruleText = rule.cssText.replace(pseudos, this.replaceRule);
      } else {
        ruleText = "@media " + rule.parentRule.media[0] + " { " + (rule.cssText.replace(pseudos, this.replaceRule)) + " }";
      }
      return this.insertRule(ruleText);
    }
  };

  KssStateGenerator.prototype.replaceRule = function(matched, stuff) {
    return matched.replace(/\:/g, '.pseudo-class-');
  };

  KssStateGenerator.prototype.insertRule = function(rule) {
    var headEl;
    headEl = document.getElementsByTagName('head')[0];
    if (styleEl.styleSheet) {
      styleEl.styleSheet.cssText = rule;
    } else {
      styleEl.appendChild(document.createTextNode(rule));
    }
    return headEl.appendChild(styleEl);
  };

  return KssStateGenerator;

})();

new KssStateGenerator;
